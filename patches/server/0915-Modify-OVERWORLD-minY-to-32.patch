From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ayouuuu <arobcher233@163.com>
Date: Mon, 19 Aug 2024 17:02:39 +0800
Subject: [PATCH] Modify OVERWORLD minY to -32


diff --git a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
index aeb517417e2a4950de29ab48de4558047e7a5343..d7409311747aeef775a6c0e6e8758c768ca29cd8 100644
--- a/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
+++ b/src/main/java/net/minecraft/world/level/dimension/DimensionType.java
@@ -42,7 +42,7 @@ public class DimensionType {
     public static final ResourceLocation OVERWORLD_EFFECTS = new ResourceLocation("overworld");
     public static final ResourceLocation NETHER_EFFECTS = new ResourceLocation("the_nether");
     public static final ResourceLocation END_EFFECTS = new ResourceLocation("the_end");
-    public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> {
+    public static final Codec<DimensionType> DIRECT_CODEC = RecordCodecBuilder.<DimensionType>create((instance) -> {
         return instance.group(Codec.LONG.optionalFieldOf("fixed_time").xmap((optional) -> {
             return optional.map(OptionalLong::of).orElseGet(OptionalLong::empty);
         }, (optionalLong) -> {
@@ -62,7 +62,7 @@ public class DimensionType {
     public static final ResourceKey<DimensionType> OVERWORLD_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld"));
     public static final ResourceKey<DimensionType> NETHER_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("the_nether"));
     public static final ResourceKey<DimensionType> END_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("the_end"));
-    protected static final DimensionType DEFAULT_OVERWORLD = create(OptionalLong.empty(), true, false, false, true, 1.0D, false, false, true, false, true, -64, 384, 384, BlockTags.INFINIBURN_OVERWORLD, OVERWORLD_EFFECTS, 0.0F);
+    protected static final DimensionType DEFAULT_OVERWORLD = create(OptionalLong.empty(), true, false, false, true, 1.0D, false, false, true, false, true, -32, 384, 384, BlockTags.INFINIBURN_OVERWORLD, OVERWORLD_EFFECTS, 0.0F);
     protected static final DimensionType DEFAULT_NETHER = create(OptionalLong.of(18000L), false, true, true, false, 8.0D, false, true, false, true, false, 0, 256, 128, BlockTags.INFINIBURN_NETHER, NETHER_EFFECTS, 0.1F);
     protected static final DimensionType DEFAULT_END = create(OptionalLong.of(6000L), false, false, false, false, 1.0D, true, false, false, false, true, 0, 256, 256, BlockTags.INFINIBURN_END, END_EFFECTS, 0.0F);
     public static final ResourceKey<DimensionType> OVERWORLD_CAVES_LOCATION = ResourceKey.create(Registry.DIMENSION_TYPE_REGISTRY, new ResourceLocation("overworld_caves"));
diff --git a/src/main/java/net/minecraft/world/level/levelgen/BelowZeroRetrogen.java b/src/main/java/net/minecraft/world/level/levelgen/BelowZeroRetrogen.java
index 7d7b1d215139c2980973f84166f9177cff141e02..1f0dc1becbe359643a7a80c6abbd0dff8e8c09d4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/BelowZeroRetrogen.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/BelowZeroRetrogen.java
@@ -48,7 +48,7 @@ public final class BelowZeroRetrogen {
 
         @Override
         public int getMinBuildHeight() {
-            return -64;
+            return -32;
         }
     };
     private final ChunkStatus targetStatus;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
index 94dcd56c297754be6c655bec1cc84779921195a1..a7da7b6cd36fabd6d7c6575fa9b583816f42a18f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
@@ -11,7 +11,7 @@ import net.minecraft.world.level.biome.TerrainShaper;
 import net.minecraft.world.level.dimension.DimensionType;
 
 public record NoiseSettings(int minY, int height, NoiseSamplingSettings noiseSamplingSettings, NoiseSlider topSlideSettings, NoiseSlider bottomSlideSettings, int noiseSizeHorizontal, int noiseSizeVertical, TerrainShaper terrainShaper) {
-    public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.create((instance) -> {
+    public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.<NoiseSettings>create((instance) -> {
         return instance.group(Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY), Codec.intRange(0, DimensionType.Y_SIZE).fieldOf("height").forGetter(NoiseSettings::height), NoiseSamplingSettings.CODEC.fieldOf("sampling").forGetter(NoiseSettings::noiseSamplingSettings), NoiseSlider.CODEC.fieldOf("top_slide").forGetter(NoiseSettings::topSlideSettings), NoiseSlider.CODEC.fieldOf("bottom_slide").forGetter(NoiseSettings::bottomSlideSettings), Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal), Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical), TerrainShaper.CODEC.fieldOf("terrain_shaper").forGetter(NoiseSettings::terrainShaper)).apply(instance, NoiseSettings::new);
     }).comapFlatMap(NoiseSettings::guardY, Function.identity());
     static final NoiseSettings NETHER_NOISE_SETTINGS = create(0, 128, new NoiseSamplingSettings(1.0D, 3.0D, 80.0D, 60.0D), new NoiseSlider(0.9375D, 3, 0), new NoiseSlider(2.5D, 4, -1), 1, 2, TerrainProvider.nether());
@@ -38,7 +38,7 @@ public record NoiseSettings(int minY, int height, NoiseSamplingSettings noiseSam
     }
 
     static NoiseSettings overworldNoiseSettings(boolean bl) {
-        return create(-64, 384, new NoiseSamplingSettings(1.0D, 1.0D, 80.0D, 160.0D), new NoiseSlider(-0.078125D, 2, bl ? 0 : 8), new NoiseSlider(bl ? 0.4D : 0.1171875D, 3, 0), 1, 2, TerrainProvider.overworld(bl));
+        return create(-32, 384, new NoiseSamplingSettings(1.0D, 1.0D, 80.0D, 160.0D), new NoiseSlider(-0.078125D, 2, bl ? 0 : 8), new NoiseSlider(bl ? 0.4D : 0.1171875D, 3, 0), 1, 2, TerrainProvider.overworld(bl));
     }
 
     public int getCellHeight() {
